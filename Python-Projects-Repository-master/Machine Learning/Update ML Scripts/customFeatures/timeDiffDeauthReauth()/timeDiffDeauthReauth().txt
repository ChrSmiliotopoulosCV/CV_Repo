# Time Difference Between Deauth and Reauth frames counting python script
# Importing Libraries
import pandas as pd
import sklearn
import numpy as np

# Importing the Dataset
# Read data from CSV file into pandas dataframe

data = pd.read_csv((
    r"D:\Personal Projects\Διδακτορικό\AWID3 Machine Learning Project\Python Data Encoding Scripts\customFeatures\timeDiffDeauthReauth()\timeDiffDeauthReauth().csv"))
data.head()

# for loop to print dataset's columnName
for (columnName, columnData) in data.iteritems():
    print('Column Name : ', columnName)

# Function to locate the condition to locate Management frames with Subtype == 12
valueCounts = data.loc[(data['Frame Type'] == 'Management frame') & (data['Subtype'] == 12)]
print(valueCounts)
# value_counts() function to calculate the number of Deauthentication frames
deauthFrames = valueCounts['Subtype'].value_counts()
print(deauthFrames)
numOfDeauthFrames = len(valueCounts)
print("The number of Deauth frames in .csv file is ", numOfDeauthFrames)

# Function to locate the condition to locate Management frames with Subtype == 2
valueCounts = data.loc[(data['Frame Type'] == 'Management frame') & (data['Subtype'] == 2)]
print(valueCounts)
# value_counts() function to calculate the number of Deauthentication frames
reauthFrames = valueCounts['Subtype'].value_counts()
print(reauthFrames)
numOfReauthFrames = len(valueCounts)
print("The number of Reauth frames in .csv file is ", numOfReauthFrames)

# Count for loop to add a conditional counter towards calculation of the custom feature
count = 1
timeOfDeauthFrame = 0
timeOfReauthFrame = 0
for index, row in data.iterrows():
    if (row['Frame Type'] == 'Management frame') and (row['Subtype'] == 12):
        data.loc[index, 'timeOfManagementFrames'] = data.loc[index, 'Time since reference or first frame']
        timeOfDeauthFrame = data.loc[index, 'Time since reference or first frame']
    else:
        data.loc[index, 'timeOfManagementFrames'] = timeOfDeauthFrame
    if (row['Frame Type'] == 'Management frame') and (row['Subtype'] == 2):
        data.loc[index, 'timeOfManagementFrames'] = data.loc[index, 'Time since reference or first frame']
        timeOfReauthFrame = data.loc[index, 'Time since reference or first frame']
        data.loc[index, 'timeDiff'] = timeOfReauthFrame - timeOfDeauthFrame
    else:
        data.loc[index, 'timeOfManagementFrames'] = timeOfReauthFrame

data['timeDiff'] = data['timeDiff'].fillna(method='ffill')
data['timeDiff'] = data['timeDiff'].fillna(0)

# New numOfUnprotectedPacketsPerSec Dataframe which gathers all the requested information towards the calculation of the
# ssidRepPerSec().
timeDiff = pd.DataFrame(data['Frame Type'])
timeDiff['Subtype'] = data['Subtype']
timeDiff['Time since reference or first frame'] = data['Time since reference or first frame']
timeDiff['timeOfManagementFrames'] = data['timeOfManagementFrames']
timeDiff['timeDiff'] = data['timeDiff']
